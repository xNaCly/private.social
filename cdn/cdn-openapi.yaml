openapi: 3.0.3
info:
  contact:
    email: teo@xnacly.me
  title: Private.social/cdn
  description: The private.social cdn manages uploading and retrieving assets of several image and video types. The cdn does not require authorization and relies on a possible attacker not knowing the directory prefix.
  license:
    name: MIT License
    url: https://mit-license.org/
  version: 1.0.11
servers:
  - url: http://localhost:8080
paths:
  /v1/asset/{prefix}/{suffix}:
    get:
      operationId: getAsset
      tags:
        - assets
      parameters:
        - name: prefix
          in: path
          description: Directory prefix
          required: true
          schema:
            type: string
            example: cBtMYobImyfLVNpvwlxDSnSmgttBKIaS
        - name: suffix
          in: path
          description: Base64 encoded filename
          required: true
          schema:
            type: string
            example: "bm9kaGJ3LnBuZw=="
      summary: Access uploaded files from the cdn
      description: This endpoint serves the previously uploaded files from a static folder, it is therefore generaly very fast (<4ms Response time). After the first request the asset is cached for 3600 seconds (60min / 1h). Both the `prefix` and the `filename` can be get from the `/upload/` path.
      responses:
        "200":
          description: Requested file found and served
        "404":
          description: Requested file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: false
                code: 404
                message: Not Found
                data: null

  /v1/upload/{filename}:
    post:
      tags:
        - assets
      summary: Upload a file to the cdn
      description: This endpoint accepts several media types / MIME-Types and saves the given file from the binary data request body with a randomly generated `prefix` on disk. This file is then accessable using the `/asset/` endpoint with the up on uploading returned `path` which contains the `prefix` and the `filename` of the uploaded file.
      operationId: uploadAsset
      parameters:
        - name: filename
          in: path
          description: name of the file to upload
          required: true
          schema:
            type: string
            example: test.png
      requestBody:
        description: Create a new pet in the store
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
          image/heic:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/jpg:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "201":
          description: Created asset in cdn storage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid input, empty file or unsupported file format / MIME-type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                success: false
                code: 400
                message: "Invalid input, empty file or unsupported file format / MIME-type"
                data: null
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "file uploaded successfully"
        data:
          type: object
          example:
            path: /v1/asset/zLlQhJnuIubDMANpYeskwgAtgiZhiBSN/ufo361.png

tags:
  - name: assets
    description: all requests regarding assets
